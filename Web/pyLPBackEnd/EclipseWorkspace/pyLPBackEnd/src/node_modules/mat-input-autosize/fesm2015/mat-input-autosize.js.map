{"version":3,"file":"mat-input-autosize.js","sources":["../../../projects/mat-input-autosize/src/lib/mat-input-autosize.directive.ts","../../../projects/mat-input-autosize/src/lib/mat-input-autosize.module.ts","../../../projects/mat-input-autosize/src/public-api.ts","../../../projects/mat-input-autosize/src/mat-input-autosize.ts"],"sourcesContent":["import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport {NgModel} from '@angular/forms';\nimport {MatInput} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\n\n@Directive({\n    selector: '[matInputAutosize]'\n})\nexport class MatInputAutosizeDirective implements AfterViewInit, OnDestroy {\n    inputElement: HTMLInputElement;\n    hiddenText: Text;\n    changeDetectSub: Subscription;\n\n    @Input() matInputAutosizeMaxWidth;\n    @Input() matInputAutosizeMinWidth = '120px';\n    @Input() matInputAutosizeFontStyle;\n\n    constructor(el: ElementRef<HTMLInputElement>,\n                @Self() private childMatInput: MatInput,\n                @Optional() @Self() private childNgModel: NgModel) {\n        this.inputElement = el.nativeElement;\n    }\n\n    ngAfterViewInit(): void {\n        this.checkErrors();\n        this.overwriteParentWidth();\n        this.createHiddenTextContainer();\n        this.setOwnStyles();\n        this.subscribeToChanges();\n    }\n\n    ngOnDestroy(): void {\n        if (this.changeDetectSub) {\n            this.changeDetectSub.unsubscribe();\n        }\n    }\n\n    checkErrors(): void {\n        if (!(this.inputElement instanceof HTMLInputElement)) {\n            throw new Error('matInputAutosize directive must be on an input element');\n        }\n\n        if (!this.childMatInput) {\n            throw new Error('Element with matInputAutosize directive must also have the matInput directive');\n        }\n    }\n\n    overwriteParentWidth(): void {\n        Object.assign((this.inputElement.parentNode as HTMLElement).style, {width: '100%'});\n    }\n\n    createHiddenTextContainer(): void {\n        const textContainer = document.createElement('div');\n        Object.assign(textContainer.style, {\n            display: 'inline-block',\n            'max-width': this.matInputAutosizeMaxWidth || null,\n            'min-width': this.matInputAutosizeMinWidth,\n            font: this.matInputAutosizeFontStyle || null,\n            visibility: 'hidden',\n            'white-space': 'pre'\n        });\n        this.inputElement.parentNode.appendChild(textContainer);\n\n        this.hiddenText = document.createTextNode(' ');\n        textContainer.appendChild(this.hiddenText);\n    }\n\n    setOwnStyles(): void {\n        Object.assign(this.inputElement.style, {\n            position: 'absolute',\n            left: '0'\n        });\n    }\n\n    subscribeToChanges(): void {\n        if (this.childNgModel) {\n            this.changeDetectSub = this.childNgModel.control.valueChanges.subscribe(this.changeHiddenText);\n        } else {\n            this.inputElement.addEventListener('input', () => this.changeHiddenText(this.inputElement.value));\n        }\n    }\n\n    changeHiddenText = (newValue: string): void => {\n        if (this.hiddenText) {\n            this.hiddenText.data = newValue + ' ';\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { MatInputAutosizeDirective } from './mat-input-autosize.directive';\n\n@NgModule({\n  declarations: [MatInputAutosizeDirective],\n  imports: [\n  ],\n  exports: [MatInputAutosizeDirective]\n})\nexport class MatInputAutosizeModule { }\n","/*\n * Public API Surface of mat-input-autosize\n */\n\nexport * from './lib/mat-input-autosize.directive';\nexport * from './lib/mat-input-autosize.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}