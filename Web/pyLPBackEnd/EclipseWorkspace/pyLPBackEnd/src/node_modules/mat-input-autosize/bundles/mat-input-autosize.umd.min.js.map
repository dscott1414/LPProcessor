{"version":3,"sources":["../../../projects/mat-input-autosize/src/lib/mat-input-autosize.directive.ts","../../../projects/mat-input-autosize/src/lib/mat-input-autosize.module.ts"],"names":["MatInputAutosizeDirective","el","childMatInput","childNgModel","_this","this","matInputAutosizeMinWidth","changeHiddenText","newValue","hiddenText","data","inputElement","nativeElement","prototype","ngAfterViewInit","checkErrors","overwriteParentWidth","createHiddenTextContainer","setOwnStyles","subscribeToChanges","ngOnDestroy","changeDetectSub","unsubscribe","HTMLInputElement","Error","Object","assign","parentNode","style","width","textContainer","document","createElement","display","max-width","matInputAutosizeMaxWidth","min-width","font","matInputAutosizeFontStyle","visibility","white-space","appendChild","createTextNode","position","left","control","valueChanges","subscribe","addEventListener","value","Directive","args","selector","ElementRef","MatInput","decorators","type","Self","NgModel","Optional","Input","NgModule","declarations","imports","exports"],"mappings":"meAyBI,SAAAA,EAAYC,EACgBC,EACYC,GAFxC,IAAAC,EAAAC,KAC4BA,KAAAH,cAAAA,EACYG,KAAAF,aAAAA,EAL/BE,KAAAC,yBAA2B,QAoEpCD,KAAAE,iBAAmB,SAACC,GACZJ,EAAKK,aACLL,EAAKK,WAAWC,KAAOF,EAAW,MAhEtCH,KAAKM,aAAeV,EAAGW,qBAG3BZ,EAAAa,UAAAC,gBAAA,WACIT,KAAKU,cACLV,KAAKW,uBACLX,KAAKY,4BACLZ,KAAKa,eACLb,KAAKc,sBAGTnB,EAAAa,UAAAO,YAAA,WACQf,KAAKgB,iBACLhB,KAAKgB,gBAAgBC,eAI7BtB,EAAAa,UAAAE,YAAA,WACI,KAAMV,KAAKM,wBAAwBY,kBAC/B,MAAM,IAAIC,MAAM,0DAGpB,IAAKnB,KAAKH,cACN,MAAM,IAAIsB,MAAM,kFAIxBxB,EAAAa,UAAAG,qBAAA,WACIS,OAAOC,OAAQrB,KAAKM,aAAagB,WAA2BC,MAAO,CAACC,MAAO,UAG/E7B,EAAAa,UAAAI,0BAAA,WACI,IAAMa,EAAgBC,SAASC,cAAc,OAC7CP,OAAOC,OAAOI,EAAcF,MAAO,CAC/BK,QAAS,eACTC,YAAa7B,KAAK8B,0BAA4B,KAC9CC,YAAa/B,KAAKC,yBAClB+B,KAAMhC,KAAKiC,2BAA6B,KACxCC,WAAY,SACZC,cAAe,QAEnBnC,KAAKM,aAAagB,WAAWc,YAAYX,GAEzCzB,KAAKI,WAAasB,SAASW,eAAe,KAC1CZ,EAAcW,YAAYpC,KAAKI,aAGnCT,EAAAa,UAAAK,aAAA,WACIO,OAAOC,OAAOrB,KAAKM,aAAaiB,MAAO,CACnCe,SAAU,WACVC,KAAM,OAId5C,EAAAa,UAAAM,mBAAA,WAAA,IAAAf,EAAAC,KACQA,KAAKF,aACLE,KAAKgB,gBAAkBhB,KAAKF,aAAa0C,QAAQC,aAAaC,UAAU1C,KAAKE,kBAE7EF,KAAKM,aAAaqC,iBAAiB,SAAS,WAAM,OAAA5C,EAAKG,iBAAiBH,EAAKO,aAAasC,oCAzErGC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,kEAXVC,EAAAA,kBAOIC,EAAAA,SAAQC,WAAA,CAAA,CAAAC,KAgBCC,EAAAA,cAjBTC,EAAAA,QAAOH,WAAA,CAAA,CAAAC,KAkBEG,EAAAA,UAAQ,CAAAH,KAAIC,EAAAA,4DANxBG,EAAAA,wCACAA,EAAAA,yCACAA,EAAAA,eCdL,iCANCC,EAAAA,SAAQV,KAAA,CAAC,CACRW,aAAc,CAAC9D,GACf+D,QAAS,GAETC,QAAS,CAAChE","sourcesContent":["import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport {NgModel} from '@angular/forms';\nimport {MatInput} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\n\n@Directive({\n    selector: '[matInputAutosize]'\n})\nexport class MatInputAutosizeDirective implements AfterViewInit, OnDestroy {\n    inputElement: HTMLInputElement;\n    hiddenText: Text;\n    changeDetectSub: Subscription;\n\n    @Input() matInputAutosizeMaxWidth;\n    @Input() matInputAutosizeMinWidth = '120px';\n    @Input() matInputAutosizeFontStyle;\n\n    constructor(el: ElementRef<HTMLInputElement>,\n                @Self() private childMatInput: MatInput,\n                @Optional() @Self() private childNgModel: NgModel) {\n        this.inputElement = el.nativeElement;\n    }\n\n    ngAfterViewInit(): void {\n        this.checkErrors();\n        this.overwriteParentWidth();\n        this.createHiddenTextContainer();\n        this.setOwnStyles();\n        this.subscribeToChanges();\n    }\n\n    ngOnDestroy(): void {\n        if (this.changeDetectSub) {\n            this.changeDetectSub.unsubscribe();\n        }\n    }\n\n    checkErrors(): void {\n        if (!(this.inputElement instanceof HTMLInputElement)) {\n            throw new Error('matInputAutosize directive must be on an input element');\n        }\n\n        if (!this.childMatInput) {\n            throw new Error('Element with matInputAutosize directive must also have the matInput directive');\n        }\n    }\n\n    overwriteParentWidth(): void {\n        Object.assign((this.inputElement.parentNode as HTMLElement).style, {width: '100%'});\n    }\n\n    createHiddenTextContainer(): void {\n        const textContainer = document.createElement('div');\n        Object.assign(textContainer.style, {\n            display: 'inline-block',\n            'max-width': this.matInputAutosizeMaxWidth || null,\n            'min-width': this.matInputAutosizeMinWidth,\n            font: this.matInputAutosizeFontStyle || null,\n            visibility: 'hidden',\n            'white-space': 'pre'\n        });\n        this.inputElement.parentNode.appendChild(textContainer);\n\n        this.hiddenText = document.createTextNode(' ');\n        textContainer.appendChild(this.hiddenText);\n    }\n\n    setOwnStyles(): void {\n        Object.assign(this.inputElement.style, {\n            position: 'absolute',\n            left: '0'\n        });\n    }\n\n    subscribeToChanges(): void {\n        if (this.childNgModel) {\n            this.changeDetectSub = this.childNgModel.control.valueChanges.subscribe(this.changeHiddenText);\n        } else {\n            this.inputElement.addEventListener('input', () => this.changeHiddenText(this.inputElement.value));\n        }\n    }\n\n    changeHiddenText = (newValue: string): void => {\n        if (this.hiddenText) {\n            this.hiddenText.data = newValue + ' ';\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { MatInputAutosizeDirective } from './mat-input-autosize.directive';\n\n@NgModule({\n  declarations: [MatInputAutosizeDirective],\n  imports: [\n  ],\n  exports: [MatInputAutosizeDirective]\n})\nexport class MatInputAutosizeModule { }\n"]}